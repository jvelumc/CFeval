[{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jvelumc.github.io/CFeval/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jvelumc.github.io/CFeval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasper van Egeraat. Author, maintainer.","code":""},{"path":"https://jvelumc.github.io/CFeval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van Egeraat J (2025). CFeval: Evaluation Counterfactual Performance. R package version 0.0.1, https://jvelumc.github.io/CFeval/.","code":"@Manual{,   title = {CFeval: Evaluation of Counterfactual Performance},   author = {Jasper {van Egeraat}},   year = {2025},   note = {R package version 0.0.1},   url = {https://jvelumc.github.io/CFeval/}, }"},{"path":"https://jvelumc.github.io/CFeval/index.html","id":"cfeval--","dir":"","previous_headings":"","what":"Evaluation of Counterfactual Performance","title":"Evaluation of Counterfactual Performance","text":"Predictions interventions estimates subject’s risk follow certain counterfactual treatment. Assessing predictive performance predictions challenging, outcome realized treatment can observed.(Keogh, van Geloven, DOI 10.1097/EDE.0000000000001713). R package facilitates assessing counterfactual performance interventional predictions.","code":""},{"path":"https://jvelumc.github.io/CFeval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Evaluation of Counterfactual Performance","text":"can install development version CFeval GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jvelumc/CFeval\")"},{"path":"https://jvelumc.github.io/CFeval/index.html","id":"toy-example","dir":"","previous_headings":"","what":"Toy example","title":"Evaluation of Counterfactual Performance","text":"Simulate example data binary outcome Y (point) treatment , confounded variable L. Variable P prognostic variable outcome. treatment reduces risk bad outcome (Y = 1) simulated example. R package contains 5000 row df_dev 4000 row df_val, simulated described. Figure 1. DAG toy example Fitting logistic regression model data without accounting confounder L results model treatment apparently increases risk outcome Fitting model using IP-weighting account confounder results model treatment decreases risk outcome, know true simulated data either model used decide treatment options , need accurate estimates counterfactual risk outcome treatment options = 1 = 0. Validating model capable estimating counterfactual risks challenging. package aims guide user assessing well predictions match validation data individuals followed treatment predictions made. main function CFscore() estimates counterfactual performance measures validation dataset, printing assumptions required along way. Weights exported: calibration plots:  Compare counterfactual performance naive model:","code":"library(CFeval) head(df_dev) #>   id           L A          P Y0 Y1 Y #> 1  1 -0.56047565 0  0.3500025  1  0 1 #> 2  2 -0.23017749 0  0.8144417  0  0 0 #> 3  3  1.55870831 0 -0.5166661  0  1 0 #> 4  4  0.07050839 1 -2.6922644  0  0 0 #> 5  5  0.12928774 1 -1.0969546  0  0 0 #> 6  6  1.71506499 1 -1.2554751  1  1 1 naive_model <- glm(Y ~ A + P, family = \"binomial\", data = df_dev) summary(naive_model) #>  #> Call: #> glm(formula = Y ~ A + P, family = \"binomial\", data = df_dev) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.11397    0.04514   2.525  0.01157 *   #> A            0.20486    0.06394   3.204  0.00135 **  #> P            1.13624    0.03941  28.828  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 6897.8  on 4999  degrees of freedom #> Residual deviance: 5746.9  on 4997  degrees of freedom #> AIC: 5752.9 #>  #> Number of Fisher Scoring iterations: 4 causal_model <- glm(Y ~ A + P, family = \"binomial\", data = df_dev,                      weights = ip_weights(df_dev, A ~ L)) #> Warning in eval(family$initialize): non-integer #successes in a binomial glm! summary(causal_model) #>  #> Call: #> glm(formula = Y ~ A + P, family = \"binomial\", data = df_dev,  #>     weights = ip_weights(df_dev, A ~ L)) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.43502    0.03222   13.50   <2e-16 *** #> A           -0.45611    0.04532  -10.06   <2e-16 *** #> P            1.11034    0.02763   40.19   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 13788  on 4999  degrees of freedom #> Residual deviance: 11517  on 4997  degrees of freedom #> AIC: 11282 #>  #> Number of Fisher Scoring iterations: 4 results_causal <- CFscore(   data = df_val,   model = causal_model,    Y = \"Y\",    propensity_formula = A ~ L,    treatments = list(0, 1) ) results_causal #> Estimation of the performance of the prediction model in a #>  counterfactual (CF) dataset where everyone's treatment was set to 0 and #>  1. #> The following assumptions must be satisfied for correct inference: #> - Conditional exchangeability requires that {L} are sufficient to #>  adjust for confounding and selection bias between treatment and #>  outcome. #> - Positivity (assess $weights for outliers) #> - Consistency #> - No interference #> - No measurement error #> - Correctly specified propensity formula #>    metric   CF0   CF1 #> 1   Brier 0.197 0.212 #> 2     auc 0.753 0.726 #> 3 OEratio 1.003 0.991 summary(results_causal$weights) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.017   1.339   1.644   1.996   2.207  14.425 plot(results_causal) results_naive <- CFscore(   data = df_val,   model = naive_model,   Y = \"Y\",   propensity_formula = A ~ L,   treatments = list(0,1),   quiet = TRUE ) results_naive #>    metric   CF0   CF1 #> 1   Brier 0.201 0.218 #> 2     auc 0.753 0.726 #> 3 OEratio 1.126 0.872 plot(results_naive)"},{"path":"https://jvelumc.github.io/CFeval/index.html","id":"other-options","dir":"","previous_headings":"","what":"Other options","title":"Evaluation of Counterfactual Performance","text":"Bootstrapping 95% confidence intervals (95CI) - setting (sample size 4000, binary outcome treatment, 1 confounder) takes 30 seconds pc 200 bootstrap iterations. use 50 bootstraps save time. Maybe interested counterfactual performance level 1 Maybe model treatment level can also give counterfactual predictions CFscore, instead models can also give user-specified weights, instead propensity formula. can also assess performance measures observed data realized treatment values:","code":"CFscore(   data = df_val,   model = causal_model,    Y = \"Y\",    propensity_formula = A ~ L,    treatments = list(0, 1),   bootstrap = 50,   quiet = TRUE ) #>  bootstrapping :  1 / 50                            bootstrapping :  2 / 50                            bootstrapping :  3 / 50                            bootstrapping :  4 / 50                            bootstrapping :  5 / 50                            bootstrapping :  6 / 50                            bootstrapping :  7 / 50                            bootstrapping :  8 / 50                            bootstrapping :  9 / 50                            bootstrapping :  10 / 50                            bootstrapping :  11 / 50                            bootstrapping :  12 / 50                            bootstrapping :  13 / 50                            bootstrapping :  14 / 50                            bootstrapping :  15 / 50                            bootstrapping :  16 / 50                            bootstrapping :  17 / 50                            bootstrapping :  18 / 50                            bootstrapping :  19 / 50                            bootstrapping :  20 / 50                            bootstrapping :  21 / 50                            bootstrapping :  22 / 50                            bootstrapping :  23 / 50                            bootstrapping :  24 / 50                            bootstrapping :  25 / 50                            bootstrapping :  26 / 50                            bootstrapping :  27 / 50                            bootstrapping :  28 / 50                            bootstrapping :  29 / 50                            bootstrapping :  30 / 50                            bootstrapping :  31 / 50                            bootstrapping :  32 / 50                            bootstrapping :  33 / 50                            bootstrapping :  34 / 50                            bootstrapping :  35 / 50                            bootstrapping :  36 / 50                            bootstrapping :  37 / 50                            bootstrapping :  38 / 50                            bootstrapping :  39 / 50                            bootstrapping :  40 / 50                            bootstrapping :  41 / 50                            bootstrapping :  42 / 50                            bootstrapping :  43 / 50                            bootstrapping :  44 / 50                            bootstrapping :  45 / 50                            bootstrapping :  46 / 50                            bootstrapping :  47 / 50                            bootstrapping :  48 / 50                            bootstrapping :  49 / 50                            bootstrapping :  50 / 50                            #>    metric   CF0      CF0.95CI   CF1      CF1.95CI #> 1   Brier 0.197 0.194 - 0.203 0.212 0.208 - 0.214 #> 2     auc 0.753 0.736 - 0.768 0.726 0.718 - 0.735 #> 3 OEratio 1.003 0.977 - 1.022 0.991 0.988 - 1.014 CFscore(   data = df_val,   model = causal_model,    Y = \"Y\",    propensity_formula = A ~ L,    treatments = 1,   quiet = TRUE ) #>    metric   CF1 #> 1   Brier 0.212 #> 2     auc 0.726 #> 3 OEratio 0.991 df_dev$ip <- ip_weights(df_dev, A ~ L) model0 <- glm(Y ~ P, family = \"binomial\", data = df_dev[df_dev$A == 0, ], weights = ip) #> Warning in eval(family$initialize): non-integer #successes in a binomial glm! model1 <- glm(Y ~ P, family = \"binomial\", data = df_dev[df_dev$A == 1, ], weights = ip) #> Warning in eval(family$initialize): non-integer #successes in a binomial glm!  CFscore(   data = df_val,   model = list(model0, model1),   Y = \"Y\",   propensity_formula = A ~ L,   treatments = list(0,1),   quiet = TRUE ) #>    metric   CF0   CF1 #> 1   Brier 0.197 0.211 #> 2     auc 0.753 0.726 #> 3 OEratio 1.003 0.990 cf0 <- predict(model0, newdata = df_val, type = \"response\") cf1 <- predict(model1, newdata = df_val, type = \"response\")  CFscore(   data = df_val,   predictions = list(cf0, cf1),   Y = \"Y\",   propensity_formula = A ~ L,   treatments = list(0,1),   quiet = TRUE ) #>    metric   CF0   CF1 #> 1   Brier 0.197 0.211 #> 2     auc 0.753 0.726 #> 3 OEratio 1.003 0.990 prop_model <- glm(A ~ L, family = \"binomial\", data = df_val) prop_score <- predict(prop_model, type = \"response\") prob_trt <- ifelse(df_val$A == 1, prop_score, 1 - prop_score) my_ip_weights <- 1 / prob_trt    CFscore(   data = df_val,   predictions = list(cf0, cf1),   Y = \"Y\",   ip = my_ip_weights,   A = \"A\", #need to specify treatment var, which is normally inferred from propensity formula   treatments = list(0,1),   quiet = TRUE ) #>    metric   CF0   CF1 #> 1   Brier 0.197 0.211 #> 2     auc 0.753 0.726 #> 3 OEratio 1.003 0.990 predictions_naive <- predict(naive_model, type = \"response\", newdata = df_val) observed_score(predictions = predictions_naive, Y = df_val$Y) #>    metric  observed #> 1   Brier 0.7467057 #> 2     auc 0.2034472 #> 3 OEratio 0.9976336"},{"path":"https://jvelumc.github.io/CFeval/reference/CFscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","title":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","text":"Assess counterfactual performance model capable predictions interventions","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/CFscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","text":"","code":"CFscore(   data,   model,   predictions,   Y,   propensity_formula,   ip,   A,   treatments,   bootstrap,   plot = TRUE,   quiet = FALSE )"},{"path":"https://jvelumc.github.io/CFeval/reference/CFscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","text":"data data.frame model validated. model glm (lm?) can make predictions interventions treatment predictor, list glm's specified treatment treatments variable. Either model predictions must given. predictions numeric vector predictions intervention, list numeric vectors predictions different interventions specified treatments variable. Either model predictions must given. Y character string indicating name observed outcome column data, numeric vector observed outcomes. propensity_formula formula used estimate inverse-probability weights validation data. Treatment variable left hand side, confounders right hand side. possible different set confounders validation dataset compared model-development dataset. Either ipw must given ip inverse probabilty weights validation data. Can either string indicating name ip column validation data, numeric vector ip-weights. character string indicating name realized treatment column data. Must given ipw's specified. automatically inferred propensity_formula given. treatments treatment level list treatment levels counterfactual perormance measures evaluated. bootstrap 95 bootstrappingis desired, can achieved setting variable integer indicating amount iterations. Argument propensity_formula must given. plot set TRUE, generate calibration plot quiet set TRUE, print assumptions","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/CFscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","text":"list performance measures (Brier, Observed/Expected, AUC)   model counterfactual data, subject assigned   treatments given.","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/CFscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess counterfactual performance of a model capable of predictions under interventions — CFscore","text":"","code":"causal_model <- glm(   Y ~ A + P,   family = \"binomial\",   data = df_dev,   weights = ip_weights(df_dev, A ~ L) ) #> Warning: non-integer #successes in a binomial glm! CFscore(data = df_val, model = causal_model, Y = \"Y\",         propensity_formula = A ~ L, treatments = list(0,1)) #> Estimation of the performance of the prediction model in a #>  counterfactual (CF) dataset where everyone's treatment was set to 0 and #>  1. #> The following assumptions must be satisfied for correct inference: #> - Conditional exchangeability requires that {L} are sufficient to #>  adjust for confounding and selection bias between treatment and #>  outcome. #> - Positivity (assess $weights for outliers) #> - Consistency #> - No interference #> - No measurement error #> - Correctly specified propensity formula #>    metric   CF0   CF1 #> 1   Brier 0.197 0.212 #> 2     auc 0.753 0.726 #> 3 OEratio 1.003 0.991"},{"path":"https://jvelumc.github.io/CFeval/reference/ip_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inverse probability of treatment weights — ip_weights","title":"Get the inverse probability of treatment weights — ip_weights","text":"Get inverse probability treatment weights","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/ip_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inverse probability of treatment weights — ip_weights","text":"","code":"ip_weights(data, propensity_formula)"},{"path":"https://jvelumc.github.io/CFeval/reference/ip_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inverse probability of treatment weights — ip_weights","text":"data data.frame propensity_formula formula l.h.s. treatment variable right hand side confounders.","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/ip_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inverse probability of treatment weights — ip_weights","text":"numeric vector IP weights","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/observed_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess performance of predictions for realized treatment values. — observed_score","title":"Assess performance of predictions for realized treatment values. — observed_score","text":"Assess performance predictions realized treatment values.","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/observed_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess performance of predictions for realized treatment values. — observed_score","text":"","code":"observed_score(data, model, predictions, Y, plot = TRUE)"},{"path":"https://jvelumc.github.io/CFeval/reference/observed_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess performance of predictions for realized treatment values. — observed_score","text":"data data.frame model validated model glm predictions numeric vector predictions. Either data model must given. Y numeric vector observed outcomes, character string indicating name observed outcomes data. plot set TRUE, generate calibration plot","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/observed_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess performance of predictions for realized treatment values. — observed_score","text":"list performance measures (Brier, Observed/Expected, AUC)   model observed data","code":""},{"path":"https://jvelumc.github.io/CFeval/reference/observed_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess performance of predictions for realized treatment values. — observed_score","text":"","code":"model <- glm(   Y ~ A + P,   family = \"binomial\",   data = df_dev, ) observed_score(data = df_val, model = model, Y = \"Y\") #>    metric  observed #> 1   Brier 0.7467057 #> 2     auc 0.2034472 #> 3 OEratio 0.9976336"}]
